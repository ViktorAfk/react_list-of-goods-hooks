{"version":3,"sources":["types.ts","Components/Buttons/Buttons.tsx","Components/ListOfGoods/ListOfGoods.tsx","App.tsx","helpers.tsx","index.tsx"],"names":["SortFields","ReverseField","Buttons","props","sortField","setSortField","reverse","setReverse","resetButton","isActiveButton","className","type","cn","SortByAphabet","onClick","SortByLength","Noreverse","Reverse","ListOfGods","goods","map","good","goodsFromServer","App","useState","RemoveSort","sortValue","setsortValue","reverseValue","setReverseValue","goodsForRender","arrayOfGoods","copyOfGoods","sort","goodA","goodB","localeCompare","length","getSortedGoods","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,EAKAC,E,oDALAD,K,sBAAAA,E,sBAAAA,E,qBAAAA,M,cAKAC,K,kBAAAA,E,wBAAAA,M,uCCQCC,EAAqB,SAACC,GACjC,IACEC,EAMED,EANFC,UACAC,EAKEF,EALFE,aACAC,EAIEH,EAJFG,QACAC,EAGEJ,EAHFI,WACAC,EAEEL,EAFFK,YACAC,EACEN,EADFM,eAGF,OACE,sBAAKC,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYR,IAAcJ,EAAWa,gBAEvCC,QAAS,kBAAMT,EAAaL,EAAWa,gBALzC,iCAUA,wBACEF,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYR,IAAcJ,EAAWe,eAEvCD,QAAS,kBAAMT,EAAaL,EAAWe,eALzC,4BAUA,wBACEJ,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,WAAYN,IAAYL,EAAae,YACzCF,QAAS,kBAAOR,IAAYL,EAAagB,QACrCV,EAAWN,EAAae,WACxBT,EAAWN,EAAagB,UAN9B,qBAUER,GACA,wBACEE,KAAK,SACLD,UAAWE,IAAG,mBAAoB,CAAE,WAAYH,IAChDK,QAASN,EAHX,uBClDKU,EAAwB,SAACf,GACpC,IAAQgB,EAAUhB,EAAVgB,MAER,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,SCJJC,EAAwB,CACnC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAgB,WAC3B,MAAkCC,mBAAqBxB,EAAWyB,YAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAGIH,mBAAuBvB,EAAae,WAHxC,mBACEY,EADF,KAEEC,EAFF,KAKMC,EC1BsB,SAC5BC,EACAL,EACAE,GAEA,IAAMI,EAAW,YAAOD,GAmBxB,OAjBIL,GACFM,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQT,GACN,KAAK1B,EAAWa,cACd,OAAOqB,EAAME,cAAcD,GAC7B,KAAKnC,EAAWe,aACd,OAAOmB,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,MAKXT,IAAiB3B,EAAagB,SAChCe,EAAY1B,UAGP0B,EDEgBM,CAAehB,EACpCI,EAAWE,GAOPnB,EAA+B,WAAdiB,GACH,eAAjBE,EAEH,OACE,sBAAKlB,UAAU,kBAAf,UACE,cAAC,EAAD,CACEN,UAAWsB,EACXrB,aAAcsB,EACdrB,QAASsB,EACTrB,WAAYsB,EACZrB,YAfa,WACjBmB,EAAa3B,EAAWyB,YACxBI,EAAgB5B,EAAae,YAczBP,eAAgBA,IAElB,cAAC,EAAD,CAAYU,MAAOW,QE9CzBS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cc176e6c.chunk.js","sourcesContent":["export enum SortFields {\n  SortByLength = 'length',\n  SortByAphabet = 'alpha',\n  RemoveSort = 'remove',\n}\nexport enum ReverseField {\n  Reverse = 'reverse',\n  Noreverse = 'no-reverse',\n}\nexport type Goods = string[];\n","import cn from 'classnames';\nimport { FC } from 'react';\nimport { ReverseField, SortFields } from '../../types';\n\ninterface Props {\n  sortField: SortFields,\n  setSortField: (sortField: SortFields) => void,\n  reverse: ReverseField,\n  setReverse: (reverse: ReverseField) => void,\n  resetButton: () => void,\n  isActiveButton: boolean,\n}\n\nexport const Buttons: FC<Props> = (props) => {\n  const {\n    sortField,\n    setSortField,\n    reverse,\n    setReverse,\n    resetButton,\n    isActiveButton,\n  } = props;\n\n  return (\n    <div className=\"buttons\">\n      <button\n        type=\"button\"\n        className={cn('button is-info', {\n          'is-light': sortField !== SortFields.SortByAphabet,\n        })}\n        onClick={() => setSortField(SortFields.SortByAphabet)}\n      >\n        Sort alphabetically\n      </button>\n\n      <button\n        type=\"button\"\n        className={cn('button is-success', {\n          'is-light': sortField !== SortFields.SortByLength,\n        })}\n        onClick={() => setSortField(SortFields.SortByLength)}\n      >\n        Sort by length\n      </button>\n\n      <button\n        type=\"button\"\n        className={cn('button is-warning',\n          { 'is-light': reverse === ReverseField.Noreverse })}\n        onClick={() => (reverse === ReverseField.Reverse\n          ? setReverse(ReverseField.Noreverse)\n          : setReverse(ReverseField.Reverse))}\n      >\n        Reverse\n      </button>\n      {(isActiveButton) && (\n        <button\n          type=\"button\"\n          className={cn('button is-danger', { 'is-light': isActiveButton })}\n          onClick={resetButton}\n        >\n          Reset\n        </button>\n      )}\n\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { Goods } from '../../types';\n\ninterface Props{\n  goods:Goods\n}\nexport const ListOfGods: FC<Props> = (props) => {\n  const { goods } = props;\n\n  return (\n    <ul>\n      {goods.map(good => (\n        <li key={good} data-cy=\"Good\">{good}</li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { Goods, ReverseField, SortFields } from './types';\nimport { getSortedGoods } from './helpers';\nimport { Buttons } from './Components/Buttons/Buttons';\nimport { ListOfGods } from './Components/ListOfGoods/ListOfGoods';\n\nexport const goodsFromServer:Goods = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [sortValue, setsortValue] = useState<SortFields>(SortFields.RemoveSort);\n  const [\n    reverseValue,\n    setReverseValue,\n  ] = useState<ReverseField>(ReverseField.Noreverse);\n\n  const goodsForRender = getSortedGoods(goodsFromServer,\n    sortValue, reverseValue);\n\n  const resetButon = () => {\n    setsortValue(SortFields.RemoveSort);\n    setReverseValue(ReverseField.Noreverse);\n  };\n\n  const isActiveButton = sortValue !== 'remove'\n  || reverseValue !== 'no-reverse';\n\n  return (\n    <div className=\"section content\">\n      <Buttons\n        sortField={sortValue}\n        setSortField={setsortValue}\n        reverse={reverseValue}\n        setReverse={setReverseValue}\n        resetButton={resetButon}\n        isActiveButton={isActiveButton}\n      />\n      <ListOfGods goods={goodsForRender} />\n    </div>\n  );\n};\n","import { SortFields, ReverseField, Goods } from './types';\n\nexport const getSortedGoods = (\n  arrayOfGoods:Goods,\n  sortValue: SortFields,\n  reverseValue: ReverseField,\n) => {\n  const copyOfGoods = [...arrayOfGoods];\n\n  if (sortValue) {\n    copyOfGoods.sort((goodA, goodB) => {\n      switch (sortValue) {\n        case SortFields.SortByAphabet:\n          return goodA.localeCompare(goodB);\n        case SortFields.SortByLength:\n          return goodA.length - goodB.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseValue === ReverseField.Reverse) {\n    copyOfGoods.reverse();\n  }\n\n  return copyOfGoods;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}